# Copyright 2020-2022 Alibaba Group Holding Limited.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Vineyard CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        malloc: [dlmalloc, mimalloc]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Generate Summary for Submodules
        run: |
          git submodule > git-modules.txt
          cat git-modules.txt

      - name: Cache for ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-${{ matrix.malloc }}-ccache-${{ hashFiles('**/git-modules.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.malloc }}-ccache-

      - name: Install Dependencies for Linux
        if: runner.os == 'Linux'
        run: |
          # leverage ccache
          export PATH=/usr/lib/ccache:$PATH

          sudo apt update -y
          sudo apt install -y ca-certificates \
                              ccache \
                              cmake \
                              doxygen \
                              fuse3 \
                              libboost-all-dev \
                              libcurl4-openssl-dev \
                              libfuse3-dev \
                              libgflags-dev \
                              libgoogle-glog-dev \
                              libgmock-dev \
                              libgrpc-dev \
                              libgrpc++-dev \
                              libgtest-dev \
                              libkrb5-dev \
                              libmpich-dev \
                              libprotobuf-dev \
                              librdkafka-dev \
                              libgsasl7-dev \
                              librdkafka-dev \
                              libssl-dev \
                              libunwind-dev \
                              libxml2-dev \
                              libz-dev \
                              lsb-release \
                              pandoc \
                              protobuf-compiler-grpc \
                              python3-pip \
                              uuid-dev \
                              wget

          # install apache-arrow
          wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
          sudo apt update
          sudo apt install -y libarrow-dev=3.0.0-1 libparquet-dev=3.0.0-1 libarrow-python-dev=3.0.0-1

          # install pyarrow from scratch
          sudo pip3 install --no-binary pyarrow pyarrow==3.0.0

          # install python packages for codegen, and io adaptors
          sudo pip3 install -U "Pygments>=2.4.1"
          sudo pip3 install -r requirements-setup.txt -r requirements.txt -r requirements-dev.txt

          # install linters
          sudo pip3 install auditwheel black isort flake8 twine

          # install clang-format
          sudo curl -L https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-22538c65/clang-format-8_linux-amd64 --output /usr/bin/clang-format
          sudo chmod +x /usr/bin/clang-format

          # install matplotlib
          sudo pip3 install matplotlib

      - name: Install libgrape-lite
        if: runner.os == 'Linux'
        run: |
          # leverage ccache
          export PATH=/usr/lib/ccache:$PATH

          git clone https://github.com/alibaba/libgrape-lite.git
          cd libgrape-lite
          mkdir build
          cd build
          cmake ..
          make -j`nproc`
          sudo make install

      - name: Install libhdfs3
        if: false
        run: |
          # leverage ccache
          export PATH=/usr/lib/ccache:$PATH

          git clone https://github.com/ContinuumIO/libhdfs3-downstream.git
          cd libhdfs3-downstream/libhdfs3
          mkdir build
          cd build
          cmake ..
          make -j`nproc`
          sudo make install

      - name: Setup SSH environment
        run: |
          # avoid access node by DNS hostnames
          r=`cat /etc/hosts | grep $(hostname) || true`
          if [ -z "${r}" ];then export hn=$(hostname); sudo -E bash -c 'echo "127.0.0.1 ${hn}" >> /etc/hosts'; fi
          cat /etc/hosts

          # setup SSH server to allow login without password
          cat > sshd_config <<EOF
            SyslogFacility AUTHPRIV
            PermitRootLogin yes
            AuthorizedKeysFile	.ssh/authorized_keys
            PasswordAuthentication yes
            ChallengeResponseAuthentication no
            UsePAM yes
            UseDNS no
            X11Forwarding no
            PrintMotd no
          EOF
          sudo mv sshd_config /etc/ssh/sshd_config
          sudo systemctl restart ssh

          # generate proper SSH key
          cat /dev/zero | ssh-keygen -t rsa -b 4096 -N '' -f ~/.ssh/id_rsa

          # add key to authorized_keys file
          cat ~/.ssh/id_rsa.pub | tee -a ~/.ssh/authorized_keys

          # ensure the permissions of SSH files
          chmod 600 ~/.ssh/authorized_keys
          chmod 700 ~/.ssh
          sudo chmod -c 0755 ~/
          ls -la ~/.ssh

          # test SSH login, without password
          ssh -vvv -i ~/.ssh/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no $(whoami)@localhost

      - name: Setup tmate session
        if: false
        uses: mxschmitt/action-tmate@v2

      - name: CMake
        run: |
          # leverage ccache
          export PATH=/usr/lib/ccache:$PATH

          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug \
                   -DBUILD_SHARED_LIBS=ON \
                   -DUSE_ASAN=ON \
                   -DWITH_ALLOCATOR=${{ matrix.malloc }} \
                   -DBUILD_VINEYARD_COVERAGE=ON \
                   -DBUILD_VINEYARD_PYTHON_BINDINGS=ON \
                   -DBUILD_VINEYARD_BASIC=ON \
                   -DBUILD_VINEYARD_IO=ON \
                   -DBUILD_VINEYARD_IO_KAFKA=ON \
                   -DBUILD_VINEYARD_MALLOC=ON \
                   -DBUILD_VINEYARD_HOSSEINMOEIN_DATAFRAME=ON \
                   -DBUILD_VINEYARD_FUSE=ON \
                   -DBUILD_VINEYARD_FUSE_PARQUET=ON \
                   -DBUILD_VINEYARD_TESTS=ON

      - name: Cpp format and lint
        run: |
          cd build

          function prepend() { while read line; do echo "${1}${line}"; done; }

          make vineyard_clformat
          GIT_DIFF=$(git diff --ignore-submodules)
          if [[ -n $GIT_DIFF ]]; then
              echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
              echo "| clang-format failures found!"
              echo "|"
              echo "$GIT_DIFF" | prepend "| "
              echo "|"
              echo "| Run: "
              echo "|"
              echo "|    make vineyard_clformat"
              echo "|"
              echo "| to fix this error."
              echo "|"
              echo "| Ensure you are working with clang-format-8, which can be obtained from"
              echo "|"
              echo "|    https://github.com/muttleyxd/clang-tools-static-binaries/releases"
              echo "|"
              echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
              exit -1
          fi

          function ec() { [[ "$1" == "-h" ]] && { shift && eval $* > /dev/null 2>&1; ec=$?; echo $ec; } || eval $*; ec=$?; }

          ec make vineyard_cpplint
          if [[ "$ec" != "0" ]]; then
              echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
              echo "| cpplint failures found! Run: "
              echo "|"
              echo "|    make vineyard_cpplint"
              echo "|"
              echo "| to fix this error."
              echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
              exit -1
          fi

      - name: Python format and lint
        run: |
          function prepend() { while read line; do echo "${1}${line}"; done; }

          python3 setup.py lint --inplace=true
          GIT_DIFF=$(git diff --ignore-submodules)
          if [[ -n $GIT_DIFF ]]; then
              echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
              echo "| black (python format) failures found!"
              echo "|"
              echo "$GIT_DIFF" | prepend "| "
              echo "|"
              echo "|Run: "
              echo "|"
              echo "|    python3 setup.py lint --inplace=true"
              echo "|"
              echo "| to fix this error."
              echo "|"
              echo "| The tool black can be installed by"
              echo "|"
              echo "|    pip3 install black isort flake8"
              echo "|"
              echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
              exit -1
          fi

      - name: Build
        run: |
          # leverage ccache
          export PATH=/usr/lib/ccache:$PATH
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib64

          pushd build
          make -j`nproc`
          make vineyard_tests -j`nproc`
          make vineyard_client_python -j`nproc`
          make ccache-stats
          sudo make install
          popd

          # not used anymore
          rm -rf build/lib*

          # build & install vineyard for python
          rm -rf build/lib* build/bdist.*
          python3 setup.py bdist_wheel

          for pkg in airflow dask io ml; do
            rm -rf build/lib* build/bdist.*
            python3 setup_${pkg}.py bdist_wheel
          done

          # install python packages
          twine check dist/*.whl
          sudo pip3 install dist/*.whl -U

      - name: Get Test Data
        run: |
          git clone https://github.com/7br/gstest.git --depth=1

      - name: Setup tmate session
        if: false
        uses: mxschmitt/action-tmate@v2

      - name: Run Tests
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib64:/usr/local/lib/x86_64-linux-gnu

          export VINEYARD_DATA_DIR=`pwd`/gstest
          export TMPDIR="${TMPDIR:-$(dirname $(mktemp))}"

          rm -rf default.etcd
          rm -rf /dev/shm/etcd*
          python3 test/runner.py --with-cpp --with-deployment

      - name: Setup tmate session
        if: false
        uses: mxschmitt/action-tmate@v2

      - name: Run Python Tests with Debug
        if: ${{ github.event_name == 'push' }}
        uses: sighingnow/action-tmate@master
        with:
          script-to-run: |
            export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib64:/usr/local/lib/x86_64-linux-gnu

            # enable coredump for debugging
            ulimit -c unlimited

            export VINEYARD_DEVELOP=TRUE

            export VINEYARD_DATA_DIR=`pwd`/gstest
            export TMPDIR="${TMPDIR:-$(dirname $(mktemp))}"

            rm -rf default.etcd
            rm -rf /dev/shm/etcd*
            python3 test/runner.py --with-python --with-migration --with-deployment --with-contrib

      - name: Run Python Tests
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib64:/usr/local/lib/x86_64-linux-gnu

          # enable coredump for debugging
          ulimit -c unlimited

          export VINEYARD_DEVELOP=TRUE

          export VINEYARD_DATA_DIR=`pwd`/gstest
          export TMPDIR="${TMPDIR:-$(dirname $(mktemp))}"

          rm -rf default.etcd
          rm -rf /dev/shm/etcd*
          python3 test/runner.py --with-python --with-migration --with-deployment --with-contrib

      - name: Setup tmate session
        if: false
        uses: mxschmitt/action-tmate@v2

      - name: Run IO Tests
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib64:/usr/local/lib/x86_64-linux-gnu

          export VINEYARD_DEVELOP=TRUE

          export VINEYARD_DATA_DIR=`pwd`/gstest
          export TMPDIR="${TMPDIR:-$(dirname $(mktemp))}"

          rm -rf default.etcd
          rm -rf /dev/shm/etcd*
          python3 test/runner.py --with-io --with-migration
          
      - name: Run FUSE Tests
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib64:/usr/local/lib/x86_64-linux-gnu

          export VINEYARD_DEVELOP=TRUE
          export VINEYARD_DATA_DIR=`pwd`/gstest
          export TMPDIR="${TMPDIR:-$(dirname $(mktemp))}"

          rm -rf default.etcd
          rm -rf /dev/shm/etcd*
          python3 test/runner.py --with-fuse
        
      - name: Find vineyard using CMake
        run: |
          cmake -S test/vineyard-cmake-example -B build/vineyard-cmake-example
          cmake --build build/vineyard-cmake-example

      - name: Setup tmate session
        if: false
        uses: mxschmitt/action-tmate@v2

      - name: Upload Coverage
        if: runner.os == 'Linux'
        uses: codecov/codecov-action@v1
        with:
          verbose: true

      - name: Extract tag name
        id: tag
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        run: echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}

      - name: Upload vineyard contrib wheels to tagged release
        uses: svenstaro/upload-release-action@v2
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && github.repository == 'v6d-io/v6d' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*vineyard*.whl
          file_glob: true
          tag: ${{ steps.tag.outputs.TAG }}
          prerelease: false
          overwrite: true
          body: "vineyard-contrib ${{ steps.tag.outputs.TAG }}"
